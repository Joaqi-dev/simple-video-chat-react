{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joaqi\\\\super-duper-app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst servers = {\n  iceServers: [{\n    urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302']\n  }]\n};\nlet pc = new RTCPeerConnection(servers);\nlet localStream = null;\nlet remoteStream = null;\nvar peer = new Peer();\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.displayVideo = this.displayVideo.bind(this);\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.remoteRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      roomId: \"\"\n    };\n  }\n\n  callAPI() {\n    fetch(\"http://localhost:9000/testAPI\").then(res => res.text()).then(res => this.setState({\n      roomId: res\n    }));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  callUser() {\n    fetch(\"http://localhost:9000/connect\");\n  }\n\n  async displayVideo() {\n    remoteStream = new MediaStream();\n    const webcamVideo = this.myRef.current;\n    localStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    localStream.getTracks().forEach(track => {\n      pc.addTrack(track, localStream);\n    });\n\n    pc.ontrack = event => {\n      event.streams[0].getTracks().forEach(track => {\n        remoteStream.addTrack(track);\n      });\n    };\n\n    webcamVideo.srcObject = localStream;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"body\", {\n        className: \"App-body\",\n        children: [\"hi\", /*#__PURE__*/_jsxDEV(Box, {\n          className: \"hostVideo\",\n          p: 2,\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: this.myRef,\n            autoplay: \"true\",\n            playsinline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.displayVideo,\n          children: \"Turn on Camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.callUser,\n          children: \"Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-intro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Joaqi/super-duper-app/client/src/App.js"],"names":["React","Component","Box","Peer","servers","iceServers","urls","pc","RTCPeerConnection","localStream","remoteStream","peer","App","constructor","props","displayVideo","bind","myRef","createRef","remoteRef","state","roomId","callAPI","fetch","then","res","text","setState","componentWillMount","callUser","MediaStream","webcamVideo","current","navigator","mediaDevices","getUserMedia","video","audio","getTracks","forEach","track","addTrack","ontrack","event","streams","srcObject","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Peer from 'peerjs';\n\nconst servers = {\n  iceServers: [\n    {\n      urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],\n    },\n  ],\n};\n\nlet pc = new RTCPeerConnection(servers);\nlet localStream = null;\nlet remoteStream = null;\nvar peer = new Peer();\n\n\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.displayVideo = this.displayVideo.bind(this);\n    this.myRef = React.createRef();\n    this.remoteRef = React.createRef();\n    this.state = {roomId: \"\"};\n  }\n\n  callAPI() {\n    fetch(\"http://localhost:9000/testAPI\")\n      .then(res => res.text())\n      .then(res => this.setState({roomId: res}));\n  }\n\n\n  componentWillMount(){\n      this.callAPI();\n  }\n\n  callUser(){\n    fetch(\"http://localhost:9000/connect\");\n    \n  }\n\n  async displayVideo(){\n    remoteStream = new MediaStream();\n    const webcamVideo = this.myRef.current;\n    localStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\n\n    localStream.getTracks().forEach((track) => {\n      pc.addTrack(track, localStream);\n    });\n\n    pc.ontrack = event => {\n      event.streams[0].getTracks().forEach(track => {\n          remoteStream.addTrack(track);\n      });\n  };\n\n    webcamVideo.srcObject = localStream;\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <body className = \"App-body\">\n          hi\n      \n              \n          <Box className = \"hostVideo\" p = {2}>\n           <video ref = {this.myRef} autoplay = 'true' playsinline></video>\n          </Box>\n          <button onClick = {this.displayVideo}>Turn on Camera</button>\n          <button onClick = {this.callUser}>Call</button>\n\n          <p className = \"App-intro\"></p>\n        </body>\n       </div>\n     );\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}