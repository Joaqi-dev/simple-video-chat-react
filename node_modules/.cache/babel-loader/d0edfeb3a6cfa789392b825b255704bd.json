{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joaqi\\\\Desktop\\\\super-duper-app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Peer from 'peerjs';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket = io('http://localhost:8000');\nlet localStream = null;\nvar peer = new Peer(undefined, {\n  path: \"/peerjs\",\n  host: \"localhost\",\n  port: \"7000\"\n});\npeer.on(\"open\", () => {\n  console.log(`my Id is ${peer.id}`);\n  socket.emit(\"join-room\", this.state.roomId, peer.id);\n});\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.displayVideo = this.displayVideo.bind(this);\n    this.callUser = this.callUser.bind(this);\n    this.connectToUser = this.connectToUser.bind(this);\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.remoteRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      roomId: \"123456\"\n    };\n  }\n\n  callAPI() {// fetch(\"http://localhost:9000/testAPI\")\n    //   .then(res => res.text())\n    //   .then(res => this.setState({roomId: res}));\n  }\n\n  componentWillMount() {// this.callAPI();\n  }\n\n  callUser() {\n    const partnerVideo = this.remoteRef.current;\n    peer.on(\"call\", call => {\n      call.answer(localStream);\n      call.on(\"stream\", userVideoStream => {\n        partnerVideo.srcObject = userVideoStream;\n      });\n    });\n    socket.on(\"user-connected\", userId => {\n      this.connectToUser(userId, localStream);\n    });\n  }\n\n  connectToUser(userId, stream) {\n    const partnerVideo = this.remoteRef.current;\n    const call = peer.call(userId, stream);\n    call.on(\"stream\", userVideoStream => {\n      partnerVideo.srcObject = userVideoStream;\n    });\n  }\n\n  async displayVideo() {\n    const webcamVideo = this.myRef.current;\n    localStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    webcamVideo.srcObject = localStream;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"body\", {\n        className: \"App-body\",\n        children: [\"hi\", peer.id, /*#__PURE__*/_jsxDEV(Box, {\n          className: \"hostVideo\",\n          p: 2,\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: this.myRef,\n            autoplay: \"true\",\n            playsinline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.displayVideo,\n          children: \"Turn on Camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.callUser,\n          children: \"Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: this.remoteRef,\n          autoplay: \"true\",\n          playsinline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-intro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Joaqi/Desktop/super-duper-app/client/src/App.js"],"names":["React","Component","Box","Peer","io","socket","localStream","peer","undefined","path","host","port","on","console","log","id","emit","state","roomId","App","constructor","props","displayVideo","bind","callUser","connectToUser","myRef","createRef","remoteRef","callAPI","componentWillMount","partnerVideo","current","call","answer","userVideoStream","srcObject","userId","stream","webcamVideo","navigator","mediaDevices","getUserMedia","video","audio","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Peer from 'peerjs';\nimport { io } from 'socket.io-client';\n\nlet socket = io('http://localhost:8000');\nlet localStream = null;\nvar peer = new Peer(undefined, {\n  path: \"/peerjs\",\n  host: \"localhost\",\n  port: \"7000\"\n});\n\n\npeer.on(\"open\", () =>{\n  console.log(`my Id is ${peer.id}`);\n  socket.emit(\"join-room\", this.state.roomId, peer.id);\n});\n\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.displayVideo = this.displayVideo.bind(this);\n    this.callUser = this.callUser.bind(this);\n    this.connectToUser = this.connectToUser.bind(this);\n    this.myRef = React.createRef();\n    this.remoteRef = React.createRef();\n    this.state = {roomId: \"123456\"};\n  }\n\n  callAPI() {\n    // fetch(\"http://localhost:9000/testAPI\")\n    //   .then(res => res.text())\n    //   .then(res => this.setState({roomId: res}));\n  }\n\n\n  componentWillMount(){\n      // this.callAPI();\n  }\n\n  callUser(){\n    const partnerVideo = this.remoteRef.current;\n    peer.on(\"call\", (call) => {\n      call.answer(localStream);\n      call.on(\"stream\", (userVideoStream)=> {\n        partnerVideo.srcObject = userVideoStream;\n      });\n    });\n\n    socket.on(\"user-connected\", (userId) => {\n      this.connectToUser(userId, localStream);\n    });\n    \n  }\n\n  connectToUser(userId, stream){\n    const partnerVideo = this.remoteRef.current;\n    const call = peer.call(userId, stream);\n    call.on(\"stream\", (userVideoStream)=> {\n      partnerVideo.srcObject = userVideoStream;\n    });\n  }\n\n  async displayVideo(){\n    const webcamVideo = this.myRef.current;\n    localStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\n\n    webcamVideo.srcObject = localStream;\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <body className = \"App-body\">\n          hi\n          {peer.id}\n      \n              \n          <Box className = \"hostVideo\" p = {2}>\n           <video ref = {this.myRef} autoplay = 'true' playsinline></video>\n          </Box>\n          <button onClick = {this.displayVideo}>Turn on Camera</button>\n          <button onClick = {this.callUser}>Call</button>\n          <video ref = {this.remoteRef} autoplay = 'true' playsinline></video>\n\n          <p className = \"App-intro\"></p>\n        </body>\n       </div>\n     );\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}