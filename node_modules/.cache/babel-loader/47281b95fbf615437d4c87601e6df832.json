{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joaqi\\\\super-duper-app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Peer from 'peerjs';\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst servers = {\n  iceServers: [{\n    urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302']\n  }]\n};\nlet pc = new RTCPeerConnection(servers);\nlet localStream = null;\nlet remoteStream = null;\nvar peer = new Peer();\nconst socket = io(\"http://localhost:9000\");\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.displayVideo = this.displayVideo.bind(this);\n    this.callUser = this.callUser.bind(this);\n    this.connectToUser = this.connectToUser.bind(this);\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.remoteRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      roomId: \"\"\n    };\n  }\n\n  callAPI() {\n    fetch(\"http://localhost:9000/testAPI\").then(res => res.text()).then(res => this.setState({\n      roomId: res\n    }));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  callUser() {\n    const partnerVideo = this.remoteRef.current;\n    fetch(\"http://localhost:9000/connect\");\n    peer.on(\"call\", call => {\n      call.answer(localStream);\n      call.on(\"stream\", userVideoStream => {\n        partnerVideo.srcObject = userVideoStream;\n      });\n    });\n    socket.on(\"user-connected\", userId => {\n      this.connectToUser(userId, localStream);\n    });\n  }\n\n  connectToUser(userId, stream) {\n    const partnerVideo = this.remoteRef.current;\n    const call = peer.call(userId, stream);\n    call.on(\"stream\", userVideoStream => {\n      partnerVideo.srcObject = userVideoStream;\n    });\n  }\n\n  async displayVideo() {\n    remoteStream = new MediaStream();\n    const webcamVideo = this.myRef.current;\n    localStream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    });\n    localStream.getTracks().forEach(track => {\n      pc.addTrack(track, localStream);\n    });\n\n    pc.ontrack = event => {\n      event.streams[0].getTracks().forEach(track => {\n        remoteStream.addTrack(track);\n      });\n    };\n\n    webcamVideo.srcObject = localStream;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"body\", {\n        className: \"App-body\",\n        children: [\"hi\", /*#__PURE__*/_jsxDEV(Box, {\n          className: \"hostVideo\",\n          p: 2,\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: this.myRef,\n            autoplay: \"true\",\n            playsinline: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.displayVideo,\n          children: \"Turn on Camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.callUser,\n          children: \"Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: this.remoteRef,\n          autoplay: \"true\",\n          playsinline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-intro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Joaqi/super-duper-app/client/src/App.js"],"names":["React","Component","Box","Peer","io","servers","iceServers","urls","pc","RTCPeerConnection","localStream","remoteStream","peer","socket","App","constructor","props","displayVideo","bind","callUser","connectToUser","myRef","createRef","remoteRef","state","roomId","callAPI","fetch","then","res","text","setState","componentWillMount","partnerVideo","current","on","call","answer","userVideoStream","srcObject","userId","stream","MediaStream","webcamVideo","navigator","mediaDevices","getUserMedia","video","audio","getTracks","forEach","track","addTrack","ontrack","event","streams","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Box from '@material-ui/core/Box';\nimport Peer from 'peerjs';\nimport { io } from \"socket.io-client\";\n\nconst servers = {\n  iceServers: [\n    {\n      urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302'],\n    },\n  ],\n};\n\nlet pc = new RTCPeerConnection(servers);\nlet localStream = null;\nlet remoteStream = null;\nvar peer = new Peer();\n\nconst socket = io(\"http://localhost:9000\");\n\n\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.displayVideo = this.displayVideo.bind(this);\n    this.callUser = this.callUser.bind(this);\n    this.connectToUser = this.connectToUser.bind(this);\n    this.myRef = React.createRef();\n    this.remoteRef = React.createRef();\n    this.state = {roomId: \"\"};\n  }\n\n  callAPI() {\n    fetch(\"http://localhost:9000/testAPI\")\n      .then(res => res.text())\n      .then(res => this.setState({roomId: res}));\n  }\n\n\n  componentWillMount(){\n      this.callAPI();\n  }\n\n  callUser(){\n    const partnerVideo = this.remoteRef.current;\n    fetch(\"http://localhost:9000/connect\");\n    peer.on(\"call\", (call) => {\n      call.answer(localStream);\n      call.on(\"stream\", (userVideoStream)=> {\n        partnerVideo.srcObject = userVideoStream;\n      });\n    });\n\n    socket.on(\"user-connected\", (userId) => {\n      this.connectToUser(userId, localStream);\n    });\n    \n  }\n\n  connectToUser(userId, stream){\n    const partnerVideo = this.remoteRef.current;\n    const call = peer.call(userId, stream);\n    call.on(\"stream\", (userVideoStream)=> {\n      partnerVideo.srcObject = userVideoStream;\n    });\n  }\n\n  async displayVideo(){\n    remoteStream = new MediaStream();\n    const webcamVideo = this.myRef.current;\n    localStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\n\n    localStream.getTracks().forEach((track) => {\n      pc.addTrack(track, localStream);\n    });\n\n    pc.ontrack = event => {\n      event.streams[0].getTracks().forEach(track => {\n          remoteStream.addTrack(track);\n      });\n  };\n\n    webcamVideo.srcObject = localStream;\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <body className = \"App-body\">\n          hi\n      \n              \n          <Box className = \"hostVideo\" p = {2}>\n           <video ref = {this.myRef} autoplay = 'true' playsinline></video>\n          </Box>\n          <button onClick = {this.displayVideo}>Turn on Camera</button>\n          <button onClick = {this.callUser}>Call</button>\n          <video ref = {this.remoteRef} autoplay = 'true' playsinline></video>\n\n          <p className = \"App-intro\"></p>\n        </body>\n       </div>\n     );\n  }\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}